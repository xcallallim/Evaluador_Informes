# py tests/test_segmenter.py
# -*- coding: utf-8 -*-
"""
Test simple para segment_text():
- Pide ruta de archivo limpio (.txt)
- Segmenta seg√∫n tipo de informe
- Muestra qu√© se detect√≥ y qu√© no
- Guarda los segmentos encontrados en resultados/segmentados_simple/
"""

import sys, os, re
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from preprocessing.segmentos import segment_text  # <-- Cambia seg√∫n el nombre del archivo que tengas

OUTPUT_DIR = os.path.join("resultados", "segmentados_simple")

def sanitize_filename(name: str) -> str:
    return re.sub(r"[^a-zA-Z0-9]+", "_", name)[:60]

def run_test(file_path: str, tipo: str):
    # Leer el texto limpio
    with open(file_path, "r", encoding="utf-8") as f:
        text = f.read()

    # Segmentar
    print("\nüîé Segmentando...")
    secciones = segment_text(text, tipo)

    if not secciones:
        print("‚ùå No se detectaron secciones. Revisa tipo de informe o contenido.")
        return

    # Mostrar resultados
    print("\nüìã Resultado de segmentaci√≥n:")
    detectadas = []
    for nombre, contenido in secciones.items():
        estado = "‚úÖ Detectado" if contenido.strip() else "‚ö†Ô∏è Vac√≠o"
        detectadas.append(nombre)
        print(f" - {nombre}: {estado}")

    # Calcular faltantes comparando con cat√°logo oficial
    if tipo == "institucional":
        catalogo = [
            "Resumen Ejecutivo",
            "Prioridades de la pol√≠tica institucional",
            "An√°lisis de resultados de los objetivos estrat√©gicos institucionales",
            "Diagn√≥stico sobre los OEI priorizados con bajo nivel de cumplimiento",
            "An√°lisis de implementaci√≥n de las acciones estrat√©gicas institucionales",
            "An√°lisis de implementaci√≥n de las AEI de los OEI priorizados",
            "An√°lisis de los productos de la AEI",
            "An√°lisis de la ejecuci√≥n operativa en las AEI cr√≠ticas",
            "Aplicaci√≥n de las recomendaciones para mejorar la implementaci√≥n de las AEI",
            "Conclusiones",
            "Recomendaciones",
            "Anexos"
        ]
    else:
        catalogo = [
            "Resumen Ejecutivo",
            "Descripci√≥n de la pol√≠tica nacional",
            "An√°lisis de los resultados de la pol√≠tica nacional",
            "An√°lisis de implementaci√≥n",
            "Conclusiones",
            "Recomendaciones"
        ]

    faltantes = [c for c in catalogo if c not in secciones]
    if faltantes:
        print("\n‚ö†Ô∏è Secciones no detectadas:")
        for s in faltantes:
            print(f" ‚ùå {s}")

    # Guardar secciones detectadas como TXT
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    base = os.path.splitext(os.path.basename(file_path))[0]
    for nombre, contenido in secciones.items():
        filename = f"{base}_{sanitize_filename(nombre)}.txt"
        path = os.path.join(OUTPUT_DIR, filename)
        with open(path, "w", encoding="utf-8") as f:
            f.write(contenido)
        print(f" üíæ Guardado: {filename}")

    print(f"\n‚úÖ Segmentaci√≥n completada. Archivos en: {OUTPUT_DIR}")

if __name__ == "__main__":
    ruta = input("üìÑ Ruta del archivo .txt limpio: ").strip()
    tipo = input("üìë Tipo de informe (institucional / politica nacional): ").strip().lower()
    run_test(ruta, tipo)
